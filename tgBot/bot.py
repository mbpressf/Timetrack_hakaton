import telebot
import json
from datetime import datetime, timedelta
import matplotlib.pyplot as plt
import threading
import time
import calendar
import os
import numpy as np

        # –°—é–¥–∞ —Ç–æ–∫–µ–Ω –æ—Ç @BotFather 
        #  |
        #  |
        # \/
TOKEN = '7079335167:AAFfk0JnUBDnE2AXXlngrERfrxWeYZI6dyw'

# –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ –±–æ—Ç–∞
bot = telebot.TeleBot(TOKEN)

# –ü—É—Ç—å –∫ –≤–∞—à–µ–º—É JSON —Ñ–∞–π–ª—É —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º–∏ —Ç–∞–π–º–µ—Ä–∞–º–∏
ADDITIONAL_JSON_FILE_PATH = 'to.json'

# –ü—É—Ç—å –∫ –≤–∞—à–µ–º—É JSON —Ñ–∞–π–ª—É —Å –æ–±—â–∏–º–∏ —Ç–∞–π–º–µ—Ä–∞–º–∏
COMMON_JSON_FILE_PATH = 'common_data.json'



# –¢–µ–∫—Å—Ç –æ–ø–∏—Å–∞–Ω–∏—è –±–æ—Ç–∞
start_message = """
–ü—Ä–∏–≤–µ—Ç! üëã –Ø - –±–æ—Ç –¥–ª—è –∫–æ–Ω—Ç—Ä–æ–ª—è –∑–∞ –ø—Ä–æ–µ–∫—Ç–æ–º. –ú–æ—è –∑–∞–¥–∞—á–∞ - –ø–æ–º–æ—á—å –≤–∞–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å, —Å–∫–æ–ª—å–∫–æ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã —Ç—Ä–∞—Ç–∏—Ç–µ –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∑–∞–¥–∞—á–∏ –∏ –ø—Ä–æ–µ–∫—Ç—ã. üïí

–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ–Ω—è, –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–∞—à–∏—Ö —Ç–∞–π–º–µ—Ä–∞—Ö, –∞ —è –±—É–¥—É —Å–ª–µ–¥–∏—Ç—å –∑–∞ –≤—Ä–µ–º–µ–Ω–µ–º –∑–∞ –≤–∞—Å! üöÄ

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /summary, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–≤–æ–¥–∫—É –æ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ üíº.
"""

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def send_start(message):
    bot.reply_to(message, start_message)



"""
–≠—Ç–∞ —á–∞—Å—Ç—å –∫–æ–¥–∞ –ø–æ–¥–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–æ–≤—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤, –ø–æ–ª—É—á–∞–µ–º—ã—Ö —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
"""



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ç–∞–π–º–µ—Ä–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞ JSON
def load_timers_from_file(file_path):
    try:
        with open(file_path, 'r', encoding='utf-8') as file:
            timer_data = json.load(file)
            if 'Timer' in timer_data:
                return [timer_data['Timer']]  # –ï—Å–ª–∏ —Ñ–∞–π–ª —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ç–∞–π–º–µ—Ä, —Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ –≤ —Å–ø–∏—Å–∫–µ
            else:
                return timer_data.get('timers', [])
    except FileNotFoundError:
        return []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø–∏—Å–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤ –≤ —Ñ–∞–π–ª JSON
def write_unique_timers_to_file(unique_timers, file_path):
    with open(file_path, 'w', encoding='utf-8') as file:
        json.dump({'timers': unique_timers}, file, ensure_ascii=False, indent=4)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ–±—â–µ–≥–æ —Ñ–∞–π–ª–∞ —Å —Ç–∞–π–º–µ—Ä–∞–º–∏
def update_common_timers():
    while True:
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∞–π–º–µ—Ä–æ–≤ –∏–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ JSON —Ñ–∞–π–ª–∞
        additional_timers = load_timers_from_file(ADDITIONAL_JSON_FILE_PATH)
        
        # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∞–π–º–µ—Ä–æ–≤ –∏–∑ –æ–±—â–µ–≥–æ JSON —Ñ–∞–π–ª–∞
        common_timers = load_timers_from_file(COMMON_JSON_FILE_PATH)

        # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤ –∏–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –≤ –æ–±—â–∏–π —Ñ–∞–π–ª
        for timer in additional_timers:
            if timer not in common_timers:
                common_timers.append(timer)

        # –ó–∞–ø–∏—Å—å —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤ –≤ –æ–±—â–∏–π —Ñ–∞–π–ª
        write_unique_timers_to_file(common_timers, COMMON_JSON_FILE_PATH)

        time.sleep(3)  # –ü–∞—É–∑–∞ –Ω–∞ 3 —Å–µ–∫—É–Ω–¥—ã

# –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–æ–≤
update_thread = threading.Thread(target=update_common_timers)
update_thread.start()



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–∏–∞–≥—Ä–∞–º–º–æ–π
def send_message_with_chart(message, text, image_path):
    try:
        with open(image_path, 'rb') as image:
            bot.send_photo(message.chat.id, image, caption=text)
    except Exception as e:
        send_message_with_html(message, text)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ HTML-—Ñ–∞–π–ª–∞ —Å –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å–≤–æ–¥–∫–æ–π
def send_message_with_html(message, text):
    with open('summary.html', 'w', encoding='utf-8') as file:
        file.write(text)

    with open('summary.html', 'rb') as file:
        bot.send_document(message.chat.id, file)





"""
–≠—Ç–∞ —á–∞—Å—Ç—å —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –¥–∏–∞–≥—Ä–∞–º–º—É –∏ html —Ñ–∞–π–ª –¥–ª—è –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–µ –ø–æ–ª—É—á–∞–µ–º–æ–π –ø–æ –∫–æ–º–∞–Ω–¥–µ /summary
"""



import matplotlib.pyplot as plt
import numpy as np

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Å—Ç–æ–ª–±–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
def plot_timers_bar(timers):
    titles = [timer.get('title') for timer in timers]
    times = [int((datetime.fromisoformat(timer.get('timestamp_end')) - datetime.fromisoformat(timer.get('timestamp_start'))).total_seconds() // 60) for timer in timers]

    plt.figure(figsize=(10, 6))
    bars = plt.bar(titles, times, color='#00ffff')  # –¶–≤–µ—Ç —Å—Ç–æ–ª–±—Ü–æ–≤
    plt.xlabel('–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–π–º–µ—Ä–∞', color='#00ffff')  # –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
    plt.ylabel('–ü–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è (–º–∏–Ω—É—Ç—ã)', color='#00ffff')  # –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
    plt.title('–ü–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –Ω–∞ –∫–∞–∂–¥—ã–π —Ç–∞–π–º–µ—Ä', color='#00ffff')  # –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
    plt.xticks(rotation=45, ha='right', color='#00ffff')  # –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
    plt.gca().set_facecolor('#162938')  # –¶–≤–µ—Ç —Ñ–æ–Ω–∞

    # –¶–≤–µ—Ç –≥—Ä–∞–Ω–∏—Ü
    plt.gca().spines['top'].set_color('#00ffff')
    plt.gca().spines['bottom'].set_color('#00ffff')
    plt.gca().spines['left'].set_color('#00ffff')
    plt.gca().spines['right'].set_color('#00ffff')

    # –¶–≤–µ—Ç —á–µ—Ä—Ç–æ—á–µ–∫ (—Ç–∏–∫–æ–≤) –Ω–∞ –æ—Å—è—Ö X –∏ Y
    plt.tick_params(axis='x', colors='#00ffff')
    plt.tick_params(axis='y', colors='#00ffff')

    plt.yticks(color='#00ffff')  # –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞ –ø–æ –æ—Å–∏ Y
    plt.tight_layout()
    plt.savefig('timers_plot_bar.png', facecolor='#162938')  # –¶–≤–µ—Ç —Ñ–æ–Ω–∞

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /summary
@bot.message_handler(commands=['summary'])
def send_summary(message):
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∞–π–º–µ—Ä–æ–≤ –∏–∑ –æ–±—â–µ–≥–æ JSON —Ñ–∞–π–ª–∞
    common_timers = load_timers_from_file(COMMON_JSON_FILE_PATH)

    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–≤–æ–¥–∫–∏ –≤ –≤–∏–¥–µ HTML-—Ç–∞–±–ª–∏—Ü—ã
    summary_text = "<style>body {background-color: #162938; color: #00ffff;} \
    table {font-family: Arial, sans-serif; border-collapse: collapse; width: 80%; background-color: #162938; color: #00ffff;} \
    th {background-color: #162938; color: #00ffff; font-weight: bold;} \
    td, th {border: 1px solid #00ffff; padding: 8px;} \
    tr:nth-child(even) {background-color:#162938;} \
    tr:nth-child(odd) {background-color: #162938;} </style>"
    summary_text += "<br><br><table border='1'><tr><th>–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–π–º–µ—Ä–∞</th><th>–û–ø–∏—Å–∞–Ω–∏–µ</th><th>–ü–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è</th></tr>"
    
    for timer in common_timers:
        start_time = datetime.fromisoformat(timer.get('timestamp_start'))
        end_time = datetime.fromisoformat(timer.get('timestamp_end'))
        time_diff = end_time - start_time
        spent_time = f"{time_diff.seconds // 60} –º–∏–Ω—É—Ç"  # –≤—ã–≤–æ–¥–∏–º –≤—Ä–µ–º—è –≤ –º–∏–Ω—É—Ç–∞—Ö
        timer_summary = f"<tr><td>{timer.get('title')}</td><td>{timer.get('description')}</td><td>{spent_time}</td></tr>"
        summary_text += timer_summary
    summary_text += "</table>"

    try:
        # –ü–æ–ø—ã—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—É—é —Å–≤–æ–¥–∫—É
        bot.reply_to(message, summary_text)

        # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–æ–ª–±–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
        plot_timers_bar(common_timers)
        with open('timers_plot_bar.png', 'rb') as plot:
            bot.send_photo(message.chat.id, plot)
    except telebot.apihelper.ApiTelegramException as e:
        # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º HTML —Ñ–∞–π–ª
        html_content = f"<b>–°–≤–æ–¥–∫–∞:</b><br>{summary_text}"
        bot.send_message(message.chat.id, "–°–≤–æ–¥–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–∞—è. –û—Ç–ø—Ä–∞–≤–ª—è—é –≤ –≤–∏–¥–µ HTML —Ñ–∞–π–ª–∞.")
        with open('summary.html', 'w', encoding='utf-8') as html_file:
            html_file.write(html_content)
        # –û—Ç–ø—Ä–∞–≤–∫–∞ HTML —Ñ–∞–π–ª–∞
        with open('summary.html', 'rb') as html_file:
            bot.send_document(message.chat.id, html_file, caption='–°–≤–æ–¥–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ HTML')


        # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–æ–ª–±–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã –≤ –≤–∏–¥–µ –æ—Ç–¥–µ–ª—å–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        plot_timers_bar(common_timers)
        with open('timers_plot_bar.png', 'rb') as plot:
            bot.send_photo(message.chat.id, plot)
        


"""
–≠—Ç–∞ —á–∞—Å—Ç—å —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –¥–∏–∞–≥—Ä–∞–º–º—É –∏ —Å–≤–æ–¥–∫—É –ø–æ–ª—É—á–∞–µ–º–æ–π –ø–æ –∫–æ–º–∞–Ω–¥–µ /weekly_stats
"""



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Å—Ç–æ–ª–±–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π
def plot_weekly_stats(timers):
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
    daily_stats = {}

    # –ù–∞—Ö–æ–¥–∏–º –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏
    today = datetime.now().date()
    monday = today - timedelta(days=today.weekday())

    # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    for i in range(7):
        date = monday + timedelta(days=i)
        daily_stats[date] = 0

    # –ü–æ–¥—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
    for timer in timers:
        end_time = datetime.fromisoformat(timer.get('timestamp_end')).date()
        if monday <= end_time <= today:
            daily_stats[end_time] += (datetime.fromisoformat(timer.get('timestamp_end')) - datetime.fromisoformat(timer.get('timestamp_start'))).total_seconds() / 60

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –¥–∞—Ç–µ
    sorted_daily_stats = sorted(daily_stats.items())

    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –¥–∞—Ç—ã –∏ –∑–Ω–∞—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
    dates, times = zip(*sorted_daily_stats)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –¥–∞—Ç—ã
    weekdays = [calendar.day_name[date.weekday()] for date in dates]

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å—Ç–æ–ª–±–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
    plt.figure(figsize=(10, 6))
    bars = plt.bar(weekdays, times, color='#00ffff')  # –¶–≤–µ—Ç —Å—Ç–æ–ª–±—Ü–æ–≤
    plt.xlabel('–î–µ–Ω—å –Ω–µ–¥–µ–ª–∏', color='#00ffff')  # –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
    plt.ylabel('–ü–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è (–º–∏–Ω—É—Ç—ã)', color='#00ffff')  # –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
    plt.title('–ü–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 7 –¥–Ω–µ–π', color='#00ffff')  # –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
    plt.xticks(rotation=45, color='#00ffff')  # –ü–æ–≤–æ—Ä–æ—Ç –ø–æ–¥–ø–∏—Å–µ–π –ø–æ –æ—Å–∏ X –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏, —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
    plt.tight_layout()  # –£–ª—É—á—à–µ–Ω–∏–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–µ–π

    # –¶–≤–µ—Ç —á–µ—Ä—Ç–æ—á–µ–∫ (—Ç–∏–∫–æ–≤) –Ω–∞ –æ—Å—è—Ö X –∏ Y
    plt.tick_params(axis='x', colors='#00ffff')
    plt.tick_params(axis='y', colors='#00ffff')

    # –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    plt.gca().set_facecolor('#162938')

    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –≥—Ä–∞–Ω–∏—Ü
    for spine in plt.gca().spines.values():
        spine.set_color('#00ffff')

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º—ã –≤ —Ñ–∞–π–ª
    plt.savefig('weekly_stats_plot.png', facecolor='#162938')  # –¶–≤–µ—Ç —Ñ–æ–Ω–∞

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /weekly_stats
@bot.message_handler(commands=['weekly_stats'])
def weekly_stats(message):
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∞–π–º–µ—Ä–æ–≤ –∏–∑ –æ–±—â–µ–≥–æ JSON —Ñ–∞–π–ª–∞
    common_timers = load_timers_from_file(COMMON_JSON_FILE_PATH)

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–∞–π–º–µ—Ä–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
    last_week_timers = []
    for timer in common_timers:
        end_time = datetime.fromisoformat(timer.get('timestamp_end')).date()
        if datetime.now().date() - timedelta(days=7) <= end_time <= datetime.now().date():
            last_week_timers.append(timer)

    # –ï—Å–ª–∏ —Ç–∞–π–º–µ—Ä–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é –Ω–µ—Ç
    if not last_week_timers:
        bot.reply_to(message, "–ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é –Ω–µ –±—ã–ª–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞.")
        return

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é
    total_time_minutes = sum([(datetime.fromisoformat(timer.get('timestamp_end')) - datetime.fromisoformat(timer.get('timestamp_start'))).total_seconds() / 60 for timer in last_week_timers])
    average_time_minutes = total_time_minutes / len(last_week_timers)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    bot.reply_to(message, f"–ó–∞ –ø–æ—Å–ª–µ–¥–Ω—é—é –Ω–µ–¥–µ–ª—é –±—ã–ª–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {len(last_week_timers)} —Ç–∞–π–º–µ—Ä–æ–≤.\n–û–±—â–µ–µ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {total_time_minutes:.2f} –º–∏–Ω—É—Ç.\n–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–∞–π–º–µ—Ä–∞: {average_time_minutes:.2f} –º–∏–Ω—É—Ç.")

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å—Ç–æ–ª–±–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
    plot_weekly_stats(last_week_timers)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–æ–ª–±–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
    with open('weekly_stats_plot.png', 'rb') as plot:
        bot.send_photo(message.chat.id, plot)



"""
–≠—Ç–∞ —á–∞—Å—Ç—å —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –¥–∏–∞–≥—Ä–∞–º–º—É –∏ —Å–≤–æ–¥–∫—É –ø–æ–ª—É—á–∞–µ–º–æ–π –ø–æ –∫–æ–º–∞–Ω–¥–µ /monthly_stats
"""



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Å—Ç–æ–ª–±–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
def plot_monthly_stats(timers):
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
    daily_stats = {}

    # –ù–∞—Ö–æ–¥–∏–º –ø–µ—Ä–≤—ã–π –¥–µ–Ω—å —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
    today = datetime.now().date()
    first_day_of_month = today.replace(day=1)

    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –¥–µ–Ω—å –º–µ—Å—è—Ü–∞
    _, last_day_of_month = calendar.monthrange(today.year, today.month)

    # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    for i in range(1, last_day_of_month + 1):
        date = first_day_of_month + timedelta(days=i - 1)
        daily_stats[date] = 0

    # –ü–æ–¥—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
    for timer in timers:
        end_time = datetime.fromisoformat(timer.get('timestamp_end')).date()
        if first_day_of_month <= end_time <= today:
            daily_stats[end_time] += (datetime.fromisoformat(timer.get('timestamp_end')) - datetime.fromisoformat(timer.get('timestamp_start'))).total_seconds() / 60

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –¥–∞—Ç–µ
    sorted_daily_stats = sorted(daily_stats.items())

    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –¥–∞—Ç—ã –∏ –∑–Ω–∞—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
    dates, times = zip(*sorted_daily_stats)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–Ω–µ–π –º–µ—Å—è—Ü–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –¥–∞—Ç—ã
    month_days = [date.day for date in dates]

        # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å—Ç–æ–ª–±–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
    plt.figure(figsize=(10, 6))
    bars = plt.bar(month_days, times, color='#00ffff')  # –¶–≤–µ—Ç —Å—Ç–æ–ª–±—Ü–æ–≤
    plt.xlabel('–î–µ–Ω—å –º–µ—Å—è—Ü–∞', color='#00ffff')  # –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
    plt.ylabel('–ü–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è (–º–∏–Ω—É—Ç—ã)', color='#00ffff')  # –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
    plt.title('–ü–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞ —Ç–µ–∫—É—â–∏–π –º–µ—Å—è—Ü', color='#00ffff')  # –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
    plt.xticks(month_days, color='#00ffff')  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–Ω–∏ –º–µ—Å—è—Ü–∞ –Ω–∞ –æ—Å–∏ X, —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
    plt.tight_layout()  # –£–ª—É—á—à–µ–Ω–∏–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–µ–π

    # –¶–≤–µ—Ç —á–µ—Ä—Ç–æ—á–µ–∫ (—Ç–∏–∫–æ–≤) –Ω–∞ –æ—Å—è—Ö X –∏ Y
    plt.tick_params(axis='x', colors='#00ffff')
    plt.tick_params(axis='y', colors='#00ffff')

    # –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    plt.gca().set_facecolor('#162938')

    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –≥—Ä–∞–Ω–∏—Ü
    for spine in plt.gca().spines.values():
        spine.set_color('#00ffff')

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º—ã –≤ —Ñ–∞–π–ª
    plt.savefig('monthly_stats_plot.png', facecolor='#162938')  # –¶–≤–µ—Ç —Ñ–æ–Ω–∞


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /monthly_stats
@bot.message_handler(commands=['monthly_stats'])
def monthly_stats(message):
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∞–π–º–µ—Ä–æ–≤ –∏–∑ –æ–±—â–µ–≥–æ JSON —Ñ–∞–π–ª–∞
    common_timers = load_timers_from_file(COMMON_JSON_FILE_PATH)

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–∞–π–º–µ—Ä–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
    last_month_timers = []
    for timer in common_timers:
        end_time = datetime.fromisoformat(timer.get('timestamp_end')).date()
        if datetime.now().date().replace(day=1) <= end_time <= datetime.now().date():
            last_month_timers.append(timer)

    # –ï—Å–ª–∏ —Ç–∞–π–º–µ—Ä–æ–≤ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü –Ω–µ—Ç
    if not last_month_timers:
        bot.reply_to(message, "–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü –Ω–µ –±—ã–ª–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞.")
        return

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü
    total_time_minutes = sum([(datetime.fromisoformat(timer.get('timestamp_end')) - datetime.fromisoformat(timer.get('timestamp_start'))).total_seconds() / 60 for timer in last_month_timers])
    average_time_minutes = total_time_minutes / len(last_month_timers)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    bot.reply_to(message, f"–ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–µ—Å—è—Ü –±—ã–ª–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {len(last_month_timers)} —Ç–∞–π–º–µ—Ä–æ–≤.\n–û–±—â–µ–µ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {total_time_minutes:.2f} –º–∏–Ω—É—Ç.\n–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–∞–π–º–µ—Ä–∞: {average_time_minutes:.2f} –º–∏–Ω—É—Ç.")

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å—Ç–æ–ª–±–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
    plot_monthly_stats(last_month_timers)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–æ–ª–±–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
    with open('monthly_stats_plot.png', 'rb') as plot:
        bot.send_photo(message.chat.id, plot)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è —Å—Ç–æ–ª–±–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã –∑–∞ —É–∫–∞–∑–∞–Ω–Ω—ã–π –º–µ—Å—è—Ü
def plot_monthly_stats_for_period(timers, start_date, end_date):
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å
    daily_stats = {}

    # –ó–∞–ø–æ–ª–Ω–µ–Ω–∏–µ —Å–ª–æ–≤–∞—Ä—è –Ω–∞—á–∞–ª—å–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
    current_date = start_date
    while current_date <= end_date:
        daily_stats[current_date] = 0
        current_date += timedelta(days=1)

    # –ü–æ–¥—Å—á–µ—Ç –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –¥–Ω—è
    for timer in timers:
        end_time = datetime.fromisoformat(timer.get('timestamp_end')).date()
        if start_date <= end_time <= end_date:
            daily_stats[end_time] += (datetime.fromisoformat(timer.get('timestamp_end')) - datetime.fromisoformat(timer.get('timestamp_start'))).total_seconds() / 60

    # –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ –¥–∞—Ç–µ
    sorted_daily_stats = sorted(daily_stats.items())

    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –¥–∞—Ç—ã –∏ –∑–Ω–∞—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
    dates, times = zip(*sorted_daily_stats)

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–Ω–µ–π –º–µ—Å—è—Ü–∞ –¥–ª—è –∫–∞–∂–¥–æ–π –¥–∞—Ç—ã
    month_days = [date.day for date in dates]

    import matplotlib.pyplot as plt

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å—Ç–æ–ª–±–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
    plt.figure(figsize=(10, 6))
    bars = plt.bar(month_days, times, color='#00ffff')  # –¶–≤–µ—Ç —Å—Ç–æ–ª–±—Ü–æ–≤
    plt.xlabel('–î–µ–Ω—å –º–µ—Å—è—Ü–∞', color='#00ffff')  # –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
    plt.ylabel('–ü–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è (–º–∏–Ω—É—Ç—ã)', color='#00ffff')  # –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
    plt.title(f'–ü–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è –∑–∞ {start_date.strftime("%B %Y")}', color='#00ffff')  # –¶–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
    plt.xticks(month_days, color='#00ffff')  # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–Ω–∏ –º–µ—Å—è—Ü–∞ –Ω–∞ –æ—Å–∏ X, —Ü–≤–µ—Ç —Ç–µ–∫—Å—Ç–∞
    plt.tight_layout()  # –£–ª—É—á—à–µ–Ω–∏–µ —Ä–∞—Å–ø–æ–ª–æ–∂–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–µ–π

    # –¶–≤–µ—Ç —á–µ—Ä—Ç–æ—á–µ–∫ (—Ç–∏–∫–æ–≤) –Ω–∞ –æ—Å—è—Ö X –∏ Y
    plt.tick_params(axis='x', colors='#00ffff')
    plt.tick_params(axis='y', colors='#00ffff')

    # –¶–≤–µ—Ç —Ñ–æ–Ω–∞ –≥—Ä–∞—Ñ–∏–∫–∞
    plt.gca().set_facecolor('#162938')

    # –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–≤–µ—Ç–∞ –≥—Ä–∞–Ω–∏—Ü
    for spine in plt.gca().spines.values():
        spine.set_color('#00ffff')

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∏–∞–≥—Ä–∞–º–º—ã –≤ —Ñ–∞–π–ª
    plt.savefig('monthly_stats_plot.png', facecolor='#162938')  # –¶–≤–µ—Ç —Ñ–æ–Ω–∞




"""
–≠—Ç–∞ —á–∞—Å—Ç—å —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –¥–∏–∞–≥—Ä–∞–º–º—É –∏ —Å–≤–æ–¥–∫—É –ø–æ–ª—É—á–∞–µ–º–æ–π –ø–æ –∫–æ–º–∞–Ω–¥–µ /last_month_stats
"""



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã /last_month_stats
@bot.message_handler(commands=['last_month_stats'])
def last_month_stats(message):
    # –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–∞–π–º–µ—Ä–æ–≤ –∏–∑ –æ–±—â–µ–≥–æ JSON —Ñ–∞–π–ª–∞
    common_timers = load_timers_from_file(COMMON_JSON_FILE_PATH)

    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–≥–æ –∏ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –¥–Ω—è –ø—Ä–æ—à–ª–æ–≥–æ –º–µ—Å—è—Ü–∞
    today = datetime.now().date()
    last_day_of_last_month = today.replace(day=1) - timedelta(days=1)
    first_day_of_last_month = last_day_of_last_month.replace(day=1)

    # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ç–∞–π–º–µ—Ä–æ–≤ –∑–∞ –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü
    last_month_timers = []
    for timer in common_timers:
        end_time = datetime.fromisoformat(timer.get('timestamp_end')).date()
        if first_day_of_last_month <= end_time <= last_day_of_last_month:
            last_month_timers.append(timer)

    # –ï—Å–ª–∏ —Ç–∞–π–º–µ—Ä–æ–≤ –∑–∞ –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü –Ω–µ—Ç
    if not last_month_timers:
        bot.reply_to(message, "–ó–∞ –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü –Ω–µ –±—ã–ª–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –Ω–∏ –æ–¥–Ω–æ–≥–æ —Ç–∞–π–º–µ—Ä–∞.")
        return

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∑–∞ –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü
    total_time_minutes = sum([(datetime.fromisoformat(timer.get('timestamp_end')) - datetime.fromisoformat(timer.get('timestamp_start'))).total_seconds() / 60 for timer in last_month_timers])
    average_time_minutes = total_time_minutes / len(last_month_timers)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    bot.reply_to(message, f"–ó–∞ –ø—Ä–æ—à–ª—ã–π –º–µ—Å—è—Ü –±—ã–ª–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–æ {len(last_month_timers)} —Ç–∞–π–º–µ—Ä–æ–≤.\n–û–±—â–µ–µ –ø–æ—Ç—Ä–∞—á–µ–Ω–Ω–æ–µ –≤—Ä–µ–º—è: {total_time_minutes:.2f} –º–∏–Ω—É—Ç.\n–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ —Ç–∞–π–º–µ—Ä–∞: {average_time_minutes:.2f} –º–∏–Ω—É—Ç.")

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å—Ç–æ–ª–±–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
    plot_monthly_stats_for_period(last_month_timers, first_day_of_last_month, last_day_of_last_month)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å—Ç–æ–ª–±–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã
    with open('monthly_stats_plot.png', 'rb') as plot:
        bot.send_photo(message.chat.id, plot)



# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
@bot.message_handler(func=lambda message: True)
def echo_all(message):
    bot.reply_to(message, "–Ø –ø–æ–∫–∞ –Ω–µ –∑–Ω–∞—é, —á—Ç–æ –¥–µ–ª–∞—Ç—å —Å —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–æ–π.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
def run_bot():
    bot.polling()

if __name__ == "__main__":
    run_bot()
